plugins {
    id 'application'
    id "org.sonarqube" version "5.1.0.4882"
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.owasp.dependencycheck' version '10.0.4'
    id "uk.gov.hmcts.java" version '0.12.67'
    id "com.gorylenko.gradle-git-properties" version "2.4.2"
    id 'com.github.ben-manes.versions' version '0.51.0'
    id 'jacoco'
    id 'maven-publish'
    id "au.com.dius.pact" version "4.6.17"
}

def versions = [
        lombok: '1.18.34',
        jackson: '2.18.0',
        jacocoVersion: '0.8.5'
]

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}


dependencies{
    testImplementation 'com.github.hmcts:fortify-client:1.4.9:all'
}

task fortifyScan(type: JavaExec)  {
    mainClass= "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
    classpath += sourceSets.test.runtimeClasspath
    jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}


allprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'au.com.dius.pact'

    group = 'com.github.hmcts.fees-register'
    ext {
        buildNumber = System.getenv("RELEASE_VERSION")?.replace("refs/tags/", "") ?: "DEV-SNAPSHOT"
        pacticipantVersion = getCheckedOutGitCommitHash()
    }
    version = buildNumber // set version to the latest tag or "DEV-SNAPSHOT" if not available

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url = 'https://repo.spring.io/libs-milestone' }
        maven { url = 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1' }
    }

    apply from: "${rootDir}/cve-resolution-strategy.gradle"

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:3.3.4"
            mavenBom "org.springframework:spring-framework-bom:6.1.18"
            mavenBom "org.apache.logging.log4j:log4j-bom:2.17.1"
        }
    }
}


tasks.register("codeCoverageReport", JacocoReport) {
    // If a subproject applies the 'jacoco' plugin, add the result it to the report
    subprojects { subproject ->
        subproject.plugins.withType(JacocoPlugin).configureEach {
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach {
                testTask ->
                if (testTask.getTaskIdentity().name == "test") {
                    sourceSets subproject.sourceSets.main
                    executionData(testTask)
                }
            }
        }
    }

    // enable the different report types (html, xml, csv)
    reports {
        // xml is usually used to integrate code coverage with
        // other tools like SonarQube, Coveralls or Codecov
        xml.required.set(true)

        // HTML reports can be used to see code coverage
        // without any external tools
        html.required.set(true)
        xml.outputLocation.set(file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"))
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

subprojects {
    apply plugin: 'java'
    apply plugin: "jacoco"
    apply plugin: 'maven-publish'

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Javadoc).configureEach {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    dependencies {
        implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.1'
        implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.1'
        implementation group: 'org.owasp.encoder', name: 'encoder', version: '1.3.1'
        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: versions.jackson
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: versions.jackson
        implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.6.0'

        compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
        compileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: '4.8.6'
        compileOnly group: 'joda-time', name: 'joda-time', version: '2.13.0'

        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

        testImplementation group: 'org.wiremock', name: 'wiremock-standalone', version: '3.9.1'
        testImplementation group: 'junit', name: 'junit', version: '4.12'
        testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.11.1'

        testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    }

    tasks.register('sourcesJar', Jar) {
        dependsOn classes
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }

    tasks.register('javadocJar', Jar) {
        dependsOn javadoc
        archiveClassifier.set('javadoc')
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    publishing {
        publications {
            Main(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                groupId = project.group
                artifactId = project.name
                version = project.version
            }
        }
        repositories {
            maven {
                name = "AzureArtifacts"
                url = uri("https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1")
                credentials {
                    username = System.getenv("AZURE_DEVOPS_ARTIFACT_USERNAME")
                    password = System.getenv("AZURE_DEVOPS_ARTIFACT_TOKEN")
                }
            }
        }
    }
}

dependencies {
    implementation project(':fees-register-api')
}

application {
    mainClass = 'uk.gov.hmcts.FeesRegisterServiceApplication'
}

jar {
    enabled = true
}

bootJar {
    archiveFileName.set('fees-register-app.jar')
    manifest {
        attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
}

springBoot {
    buildInfo()
}
dependencyCheck {
    suppressionFile = 'dependency-check-suppressions.xml'
}

def sonarExclusions = [
        '**/fees/**',
        '**/fees2/register/api/contract/**',
        '**/fees2/register/data/model/**',
        '**/fees2/register/data/dto/**',
        '**/fees2/register/api/contract/loader/**',
        '**/fees2/register/data/repository/FeeVersionRepository.java',
        '**/fees2/register/api/controllers/mapper/FeeDtoMapper.java',
        '**/fees2/register/util/*Loader.java'
]

sonarqube {
    properties {
        property "sonar.host.url", "https://sonar.reform.hmcts.net/"
        property "sonar.dynamicAnalysis", "reuseReports"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.exclusions", sonarExclusions.join(", ")
        property "sonar.test.exclusions", sonarExclusions.join(", ")
        property "sonar.coverage.exclusions", sonarExclusions.join(", ")
        property "sonar.projectName", "fees-register-app"
        property "sonar.projectKey", "uk.gov.hmcts.reform.fees-register:fees-register-app"
    }
}

tasks.named('sonarqube').configure {
    dependsOn codeCoverageReport
}

project.ext {
    pactVersion = getCheckedOutGitCommitHash()
}

static def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

    task runProviderPactVerification(type: Test){
        logger.lifecycle("Running Pact provider verification Tests")
        if (project.hasProperty('pact.verifier.publishResults')) {
            systemProperty 'pact.verifier.publishResults', project.property('pact.verifier.publishResults')
        }
        systemProperty 'pact.provider.version', project.pacticipantVersion
    }

    runProviderPactVerification.finalizedBy pactVerify

tasks.register('smoke', GradleBuild) {
    buildFile = './api/build.gradle'
    tasks = ['smokeTest']
}

tasks.register('functional', GradleBuild) {
    buildFile = './api/build.gradle'
    tasks = ['functionalTest']
}

tasks.register('printVersion') {
    description 'Prints the version of this project'
    doLast {
        print project.version
    }
}

run {
    def debug = System.getProperty("debug")
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
