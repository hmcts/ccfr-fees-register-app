plugins {
    id 'application'
    id 'checkstyle'
    id "org.sonarqube" version "2.6.1"
    id 'org.springframework.boot' version '2.0.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.5.RELEASE'
    id 'org.owasp.dependencycheck' version '3.1.1'
    id "com.gorylenko.gradle-git-properties" version "1.4.21"
    id 'findbugs'
    id 'jacoco'
}
allprojects {
    apply plugin: 'maven'
    apply plugin: 'io.spring.dependency-management'

    group = 'uk.gov.hmcts.reform.fees-register'
    ext {
        buildNumber = System.getenv("BUILD_NUMBER") ?: '0'
    }
    version = rootProject.file('version.txt').text.trim() + ".${buildNumber}"

    repositories {
        mavenLocal()
        maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
        maven {
            url "http://artifactory.reform.hmcts.net/artifactory/libs-release"
        }
        jcenter()
    }
    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:2.0.1.RELEASE"
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: "jacoco"
    apply plugin: "findbugs"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile group: 'org.assertj', name: 'assertj-core', version: '3.8.0'
        compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.16.16'
        compileOnly group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1'
        compileOnly group: 'joda-time', name: 'joda-time', version: '2.9.9'
    }

    test {
        finalizedBy jacocoTestReport
        jacoco {
            append = true
            destinationFile = file("${project.rootDir}/build/jacoco/test.exec")
        }
    }

    jacocoTestReport {
        executionData(test)
        reports {
            xml.enabled true
            html.enabled true
        }
    }

    findbugs {
        ignoreFailures = false
        reportsDir = file("$project.buildDir/reports/findbugs")
        effort = "max"
        reportLevel = "high"
        includeFilter = file("$rootProject.projectDir/findbugs-security-include.xml")
        excludeFilter = file("$rootProject.projectDir/findbugs-security-exclude.xml")
    }
}

dependencies {
    compile project(':fees-register-api')
}

mainClassName = 'uk.gov.hmcts.FeesRegisterServiceApplication'

jar {
    enabled = true
}

bootJar {
    archiveName 'fees-register-app.jar'
    manifest {
        attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
}

springBoot {
    buildInfo()
}
//    OWASP (./gradlew dependencyCheck -DdependencyCheck.failBuild=true)
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'dependency-check-suppressions.xml'
    format='ALL'
}

def sonarExclusions = [
        '**/fees/**',
        '**/fees2/register/api/contract/**',
        '**/fees2/register/data/model/**',
        '**/fees2/register/data/dto/**'
]

sonarqube {
    properties {
        property "sonar.host.url", "https://sonar.reform.hmcts.net/"
        property "sonar.dynamicAnalysis", "reuseReports"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/test.exec"
        property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
        property "sonar.exclusions", sonarExclusions.join(", ")
        property "sonar.test.exclusions", sonarExclusions.join(", ")
        property "sonar.coverage.exclusions", sonarExclusions.join(", ")
    }
}

task smoke(type: GradleBuild, description: 'Runs smoke tests', group: 'Verification') {
    buildFile = './api/build.gradle'
    tasks = ['smokeTest']
}

task functional(type: GradleBuild, description: 'Runs Functional tests', group: 'Verification') {
    buildFile = './api/build.gradle'
    tasks = ['functionalTest']
}

task printVersion {
    description 'Prints the version of this project'
    doLast {
        print project.version
    }
}

run {
    def debug = System.getProperty("debug")
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
    }
}

