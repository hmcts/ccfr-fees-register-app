plugins {
    id 'application'
    id "org.sonarqube" version "3.0"
    id 'org.springframework.boot' version '2.3.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id "uk.gov.hmcts.java" version '0.12.0'
    id "com.gorylenko.gradle-git-properties" version "1.4.21"
    id 'jacoco'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.8.4'
}

def versions = [
        lombok: '1.18.12',
        javaVersion: '11',
        jacocoVersion: '0.8.5'
]

allprojects {
    apply plugin: 'maven'
    apply plugin: 'io.spring.dependency-management'

    group = 'uk.gov.hmcts.reform.fees-register'
    ext {
        buildNumber = System.getenv("BUILD_NUMBER") ?: '0'
    }
    version = rootProject.file('version.txt').text.trim() + ".${buildNumber}"

    sourceCompatibility = versions.javaVersion
    targetCompatibility = versions.javaVersion

    repositories {
        mavenLocal()
        maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
        jcenter()
    }

    configurations.all {
        resolutionStrategy {
            eachDependency { DependencyResolveDetails det ->

                if (det.requested.name == 'micrometer-core' && det.requested.group == 'io.micrometer') {
                    det.useVersion '1.6.1'
                }

                if (det.requested.name == 'tomcat-embed-core') {
                    det.useVersion '9.0.41'
                }

                if (det.requested.name == 'tomcat-embed-websocket') {
                    det.useVersion '9.0.41'
                }

                if (det.requested.name == 'guava') {
                    det.useVersion '30.1-jre'
                }

                if (det.requested.name == 'jackson-databind') {
                    det.useVersion '2.11.2'
                }

            }
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:2.3.6.RELEASE"
            mavenBom 'org.apache.logging.log4j:log4j-bom:2.13.3'
        }
    }
}

tasks.register("codeCoverageReport", JacocoReport) {
    // If a subproject applies the 'jacoco' plugin, add the result it to the report
    subprojects { subproject ->
        subproject.plugins.withType(JacocoPlugin).configureEach {
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach {
                testTask ->
                if (testTask.getTaskIdentity().name == "test") {
                    sourceSets subproject.sourceSets.main
                    executionData(testTask)
                }
            }
        }
    }

    // enable the different report types (html, xml, csv)
    reports {
        // xml is usually used to integrate code coverage with
        // other tools like SonarQube, Coveralls or Codecov
        xml.enabled true

        // HTML reports can be used to see code coverage
        // without any external tools
        html.enabled true
        xml.destination = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

subprojects {
    apply plugin: 'java'
    apply plugin: "jacoco"
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    dependencies {
        compile ('com.sun.xml.bind:jaxb-osgi:2.3.1')
        compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.3'
        compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.3'
        compile group:'org.dom4j',name:'dom4j',version: '2.1.3'
        compile group: 'org.owasp.encoder', name: 'encoder', version: '1.2'
        compile (group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.0.4') {
            exclude(module: 'netty-tcnative-boringssl-static')
        }
        compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.12'
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.12'
        testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.12'
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile group: 'org.assertj', name: 'assertj-core', version: '3.11.1'
        compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.12'
        annotationProcessor 'org.projectlombok:lombok:1.18.12'
        compileOnly group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1'
        compileOnly group: 'joda-time', name: 'joda-time', version: '2.9.9'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    publishing {
        publications {
            Main(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                groupId project.group
                artifactId project.name
                version project.version
            }
        }
    }

    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
        publications = ['Main']
        publish = true
        pkg {
            repo = 'hmcts-maven'
            name = project.name
            userOrg = 'hmcts'
            licenses = ['MIT']
            vcsUrl = 'https://github.com/hmcts/ccfr-fees-register-app'
            version {
                name = project.version
            }
        }
    }
}

    dependencies {
        compile project(':fees-register-api')
    }

    mainClassName = 'uk.gov.hmcts.FeesRegisterServiceApplication'

    jar {
        enabled = true
    }

    bootJar {
        archiveName 'fees-register-app.jar'
        manifest {
            attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
        }
    }

    springBoot {
        buildInfo()
    }
    dependencyCheck {
        suppressionFile = 'dependency-check-suppressions.xml'
    }

    def sonarExclusions = [
            '**/fees/**',
            '**/fees2/register/api/contract/**',
            '**/fees2/register/data/model/**',
            '**/fees2/register/data/dto/**',
            '**/fees2/register/api/contract/loader/**',
            '**/fees2/register/data/repository/FeeVersionRepository.java',
            '**/fees2/register/util/*Loader.java'
    ]

    sonarqube {
        properties {
            property "sonar.host.url", "https://sonar.reform.hmcts.net/"
            property "sonar.dynamicAnalysis", "reuseReports"
            property "sonar.java.coveragePlugin", "jacoco"
            property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
            property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
            property "sonar.exclusions", sonarExclusions.join(", ")
            property "sonar.test.exclusions", sonarExclusions.join(", ")
            property "sonar.coverage.exclusions", sonarExclusions.join(", ")
            property "sonar.projectName", "fees-register-app"
            property "sonar.projectKey", "uk.gov.hmcts.reform.fees-register:fees-register-app"

        }
    }

    project.tasks['sonarqube'].dependsOn codeCoverageReport

    task smoke(type: GradleBuild, description: 'Runs smoke tests', group: 'Verification') {
        buildFile = './api/build.gradle'
        tasks = ['smokeTest']
    }

    task functional(type: GradleBuild, description: 'Runs Functional tests', group: 'Verification') {
        buildFile = './api/build.gradle'
        tasks = ['functionalTest']
    }

    task printVersion {
        description 'Prints the version of this project'
        doLast {
            print project.version
        }
    }

    run {
        def debug = System.getProperty("debug")
        if (debug == 'true') {
            jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
        }
    }

    wrapper {
        distributionType = Wrapper.DistributionType.ALL
    }
